# Created by github.com/tetratelabs/istio-tools/grpc-transcoder
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: grpc-2-http
spec:
  workloadLabels:
    app: grpc-2-http
  filters:
    - listenerMatch:
        portNumber: 53000
        listenerType: SIDECAR_INBOUND
      insertPosition:
        index: BEFORE
        relativeTo: envoy.router
      filterName: envoy.grpc_json_transcoder
      filterType: HTTP
      filterConfig:
        services:
        protoDescriptorBin: 
        printOptions:
          alwaysPrintPrimitiveFields: True
---
