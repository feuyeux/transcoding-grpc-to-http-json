apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'com.google.protobuf'
group 'nl.toefel'
version = '1.0.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

buildscript {
    repositories {
        mavenLocal()
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    }
    dependencies {
        // Assumes gradle 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
    }
}

repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
    mavenLocal()
}

test {
    ignoreFailures = true
}

def grpcVersion = '1.34.1'
def nettyTcNativeVersion = '2.0.35.Final'
def protobufVersion = '3.14.0'
def protocVersion = '3.14.0'

dependencies {
    compile "com.google.api.grpc:proto-google-common-protos:2.0.1"
    compile "io.grpc:grpc-alts:${grpcVersion}"
    compile "io.grpc:grpc-netty-shaded:${grpcVersion}"
    compile "io.grpc:grpc-protobuf:${grpcVersion}"
    compile "io.grpc:grpc-stub:${grpcVersion}"
    compile "com.google.api.grpc:proto-google-common-protos:1.12.0"
    compileOnly "javax.annotation:javax.annotation-api:1.2"

    // Used in HelloWorldServerTls
    compile "io.grpc:grpc-netty:${grpcVersion}"
    compile "io.netty:netty-tcnative-boringssl-static:${nettyTcNativeVersion}"

    compile "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    testCompile "io.grpc:grpc-testing:${grpcVersion}"
    testCompile "junit:junit:4.12"
    testCompile "org.mockito:mockito-core:1.9.5"
}

protobuf {
    // Protobuf will search for the protoc command on the systems path by default,
    // but the next line pulls in a specific version of a precompiled protoc without
    // requiring it in the system's search path
    protoc {
        artifact = "com.google.protobuf:protoc:${protocVersion}"
    }

    // Plugins for the protobuf compiler. This sections defines a plugin named 'grpc'
    // which generates java code from the .proto files. 
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }

    //The Protobuf plugin generates a task for each protoc run, which is for a sourceSet 
    // in a Java project, or a variant in an Android project. The task has configuration 
    // interfaces that allow you to control the type of outputs, the codegen plugins to use, 
    // and parameters. This section configures all tasks to include the grpc plugin.
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

task runServer(type: JavaExec) {
    group = "Server Execution"
    classpath = sourceSets.main.runtimeClasspath
    main = "nl.toefel.server.ServerMain"
}